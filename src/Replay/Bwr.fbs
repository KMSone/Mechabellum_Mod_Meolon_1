// === File Format ===
// "BwRp" = Magic string in ASCII
// int32 = byte offset of Metadata within the file
// (
//   uint16 = length of this Frame
//   Frame
// ) x 1 or more
// Metadata

namespace Bwr;

table Metadata {
  start_time: int64;
  duration: float32;
  levels: [Level] (required);
}
table Level {
  start_time: float32;
  duration: float32;
  scene_index: int32;
  // Byte offset of first frame of level within the file
  frame_offset: int32;
}

table Frame {
  time: float32;
  changed_settings: [ChangedSetting];
  vr_input: VrInput;
}

enum SettingType: uint8 {
  BELT_RIGHT_SIDE,
  IS_INVERTED,
  IS_RIGHT_HANDED,
  JOY_SENSITIVITY,
  LOCO_CURVE,
  LOCO_DEGREES_PER_SNAP,
  LOCO_DIRECTION,
  LOCO_SNAP_DEGREES_PER_FRAME,
  OFFSET_FLOOR,
  OFFSET_SITTING,
  PHYSICS_UPDATE_RATE,
  PLAYER_HEIGHT,
  SNAP_ENABLED,
  STANDING,
  VIRTUAL_CROUCHING,
}
struct ChangedSetting {
  type: SettingType;
  value: float32;
}

struct Vector3 {
  x: float32;
  y: float32;
  z: float32;
}

struct Transform {
  position: Vector3;
  rotation_euler: Vector3;
}

struct TransformRotY {
  position: Vector3;
  rotation_y: float32;
}

struct PlayerPosition {
  headset: Transform;
  controller_left: Transform;
  controller_right: Transform;
}

enum ButtonPress: uint16 (bit_flags) {
  A,
  B,
}
struct ControllerInputs {
  /// Bit field of ButtonPress
  buttons: uint16;
}

struct VrInput {
  player: PlayerPosition;
  vr_root: TransformRotY;
  left_controller: ControllerInputs;
  right_controller: ControllerInputs;
}

// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Bwr
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct VrInput : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public VrInput __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Bwr.PlayerPosition PlayerPosition { get { return (new Bwr.PlayerPosition()).__assign(__p.bb_pos + 0, __p.bb); } }
  public Bwr.TransformRotY VrRoot { get { return (new Bwr.TransformRotY()).__assign(__p.bb_pos + 72, __p.bb); } }
  public Bwr.ControllerInputs LeftController { get { return (new Bwr.ControllerInputs()).__assign(__p.bb_pos + 88, __p.bb); } }
  public Bwr.ControllerInputs RightController { get { return (new Bwr.ControllerInputs()).__assign(__p.bb_pos + 100, __p.bb); } }

  public static Offset<Bwr.VrInput> CreateVrInput(FlatBufferBuilder builder, float player_position_headset_position_X, float player_position_headset_position_Y, float player_position_headset_position_Z, float player_position_headset_rotation_euler_X, float player_position_headset_rotation_euler_Y, float player_position_headset_rotation_euler_Z, float player_position_controller_left_position_X, float player_position_controller_left_position_Y, float player_position_controller_left_position_Z, float player_position_controller_left_rotation_euler_X, float player_position_controller_left_rotation_euler_Y, float player_position_controller_left_rotation_euler_Z, float player_position_controller_right_position_X, float player_position_controller_right_position_Y, float player_position_controller_right_position_Z, float player_position_controller_right_rotation_euler_X, float player_position_controller_right_rotation_euler_Y, float player_position_controller_right_rotation_euler_Z, float vr_root_position_X, float vr_root_position_Y, float vr_root_position_Z, float vr_root_RotationY, byte left_controller_Buttons, float left_controller_thumbstick_X, float left_controller_thumbstick_Y, byte right_controller_Buttons, float right_controller_thumbstick_X, float right_controller_thumbstick_Y) {
    builder.Prep(4, 112);
    builder.Prep(4, 12);
    builder.Prep(4, 8);
    builder.PutFloat(right_controller_thumbstick_Y);
    builder.PutFloat(right_controller_thumbstick_X);
    builder.Pad(3);
    builder.PutByte(right_controller_Buttons);
    builder.Prep(4, 12);
    builder.Prep(4, 8);
    builder.PutFloat(left_controller_thumbstick_Y);
    builder.PutFloat(left_controller_thumbstick_X);
    builder.Pad(3);
    builder.PutByte(left_controller_Buttons);
    builder.Prep(4, 16);
    builder.PutFloat(vr_root_RotationY);
    builder.Prep(4, 12);
    builder.PutFloat(vr_root_position_Z);
    builder.PutFloat(vr_root_position_Y);
    builder.PutFloat(vr_root_position_X);
    builder.Prep(4, 72);
    builder.Prep(4, 24);
    builder.Prep(4, 12);
    builder.PutFloat(player_position_controller_right_rotation_euler_Z);
    builder.PutFloat(player_position_controller_right_rotation_euler_Y);
    builder.PutFloat(player_position_controller_right_rotation_euler_X);
    builder.Prep(4, 12);
    builder.PutFloat(player_position_controller_right_position_Z);
    builder.PutFloat(player_position_controller_right_position_Y);
    builder.PutFloat(player_position_controller_right_position_X);
    builder.Prep(4, 24);
    builder.Prep(4, 12);
    builder.PutFloat(player_position_controller_left_rotation_euler_Z);
    builder.PutFloat(player_position_controller_left_rotation_euler_Y);
    builder.PutFloat(player_position_controller_left_rotation_euler_X);
    builder.Prep(4, 12);
    builder.PutFloat(player_position_controller_left_position_Z);
    builder.PutFloat(player_position_controller_left_position_Y);
    builder.PutFloat(player_position_controller_left_position_X);
    builder.Prep(4, 24);
    builder.Prep(4, 12);
    builder.PutFloat(player_position_headset_rotation_euler_Z);
    builder.PutFloat(player_position_headset_rotation_euler_Y);
    builder.PutFloat(player_position_headset_rotation_euler_X);
    builder.Prep(4, 12);
    builder.PutFloat(player_position_headset_position_Z);
    builder.PutFloat(player_position_headset_position_Y);
    builder.PutFloat(player_position_headset_position_X);
    return new Offset<Bwr.VrInput>(builder.Offset);
  }
};


}

// === File Format ===
// "BwRp" = Magic string in ASCII
// uint32 = byte offset of Metadata within the file
// (
//   uint16 = length of this Frame
//   Frame
// ) x 1 or more
// Metadata

// After modifying this file run:
// cd src/Replays && flatc --csharp Bwr.fbs

namespace Bwr;

table Metadata {
  /// Real-world time in milliseconds since epoch
  start_time: int64;
  /// In seconds not including loads
  duration: float32;
  levels: [Level] (required);
}
table Level {
  /// In seconds since Metadata.start_time not including loads
  start_time: float32;
  /// In seconds
  duration: float32;
  /// Time spent loading before this level in seconds
  load_duration: float32;
  /// Level number
  scene_index: int32;
  /// Byte offset of first frame of level within the file
  frame_offset: int32;
}

table Frame {
  /// In seconds since start_time not including loads
  time: float32;
  /// Number of game frames that occurred between this frame and the last
  skipped_frames: uint8;
  /// Player settings which changed since the last frame (may be null if none)
  changed_settings: [ChangedSetting];
  /// Controller inputs
  vr_input: VrInput;
  /// Player state within the game world
  player_state: PlayerPosition;
  /// Items carried by the player (may be null if none)
  inventory: [ItemInSlot];
}

enum SettingType: uint8 {
  REFRESH_RATE,
  BELT_RIGHT_SIDE,
  IS_INVERTED,
  IS_RIGHT_HANDED,
  JOY_SENSITIVITY,
  LOCO_CURVE,
  LOCO_DEGREES_PER_SNAP,
  LOCO_DIRECTION,
  LOCO_SNAP_DEGREES_PER_FRAME,
  OFFSET_FLOOR,
  OFFSET_SITTING,
  PHYSICS_UPDATE_RATE,
  PLAYER_HEIGHT,
  SNAP_ENABLED,
  STANDING,
  VIRTUAL_CROUCHING,
}
struct ChangedSetting {
  type: SettingType;
  value: float32;
}

struct Vector2 {
  x: float32;
  y: float32;
}

struct Vector3 {
  x: float32;
  y: float32;
  z: float32;
}

struct Transform {
  position: Vector3;
  rotation_euler: Vector3;
}

struct TransformRotY {
  position: Vector3;
  rotation_y: float32;
}

struct HeadsetInput {
  /// Relative to VR root (play space)
  position: Transform;
}

enum ButtonPress: uint8 (bit_flags) {
  A,
  B,
  MENU,
  SECONDARY_MENU,
  THUMB_STICK,
  PRIMARY_INTERACTION,
  SECONDARY_INTERACTION,
  GRABBED_STATE,
}
struct ControllerInput {
  /// Bit field of ButtonPress
  buttons: uint8;
  thumbstick: Vector2;
  /// Relative to VR root (play space)
  position: Transform;
}

struct VrInput {
  headset: HeadsetInput;
  left_controller: ControllerInput;
  right_controller: ControllerInput;
}

struct PlayerPosition {
  /// Position/rotation of player at their base (feet)
  root: TransformRotY;
  /// Amount crouched where X is on toes, X is fully crouched, X is standing normally
  feet_offset: float32;
  /// Position of hand (can be different to controller position)
  left_hand: Transform;
  /// Position of hand (can be different to controller position)
  right_hand: Transform;
}

enum InventorySlot: uint8 {
  LEFT_SHOULDER,
  RIGHT_SHOULDER,
  LEFT_UNDERARM,
  RIGHT_UNDERARM,
  BUTT,
}
enum Item: uint8 {}
struct ItemInSlot {
  slot: InventorySlot;
  item: Item;
}

// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Bwr
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct Transform : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public Transform __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Bwr.Vector3 Position { get { return (new Bwr.Vector3()).__assign(__p.bb_pos + 0, __p.bb); } }
  public Bwr.Vector3 RotationEuler { get { return (new Bwr.Vector3()).__assign(__p.bb_pos + 12, __p.bb); } }

  public static Offset<Bwr.Transform> CreateTransform(FlatBufferBuilder builder, float position_X, float position_Y, float position_Z, float rotation_euler_X, float rotation_euler_Y, float rotation_euler_Z) {
    builder.Prep(4, 24);
    builder.Prep(4, 12);
    builder.PutFloat(rotation_euler_Z);
    builder.PutFloat(rotation_euler_Y);
    builder.PutFloat(rotation_euler_X);
    builder.Prep(4, 12);
    builder.PutFloat(position_Z);
    builder.PutFloat(position_Y);
    builder.PutFloat(position_X);
    return new Offset<Bwr.Transform>(builder.Offset);
  }
}


}
